{
    "title": "Amazon Elastic File System",
    "description": "Amazon Elastic File System Amazon Elastic File System (Amazon EFS) provides\nsimple, scalable file storage for use with Amazon EC2 instances in the AWS\nCloud. With Amazon EFS, storage capacity is elastic, growing and shrinking\nautomatically as you add and remove files, so your applications have the storage\nthey need, when they need it. For more information, see the User Guide\n[https://docs.aws.amazon.com/efs/latest/ug/api-reference.html].",
    "docsUrl": "https://aws.amazon.com/elasticfilesystem/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/elasticfilesystem/2015-02-01/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://elasticfilesystem.amazonaws.com/",
                    "http://elasticfilesystem.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "CreateTags": {
            "main": "./lib/actions/CreateTags.js",
            "title": "CreateTags",
            "description": "Creates or overwrites tags associated with a file system. Each tag is a\nkey-value pair. If a tag key specified in the request already exists on the file\nsystem, this operation overwrites its value with the value provided in the\nrequest. If you add the Name tag to your file system, Amazon EFS returns it in\nthe response to the DescribeFileSystems operation. \n\nThis operation requires permission for the elasticfilesystem:CreateTags action.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteTags": {
            "main": "./lib/actions/DeleteTags.js",
            "title": "DeleteTags",
            "description": "Deletes the specified tags from a file system. If the DeleteTags request\nincludes a tag key that doesn't exist, Amazon EFS ignores it and doesn't cause\nan error. For more information about tags and related restrictions, see Tag\nRestrictions\n[https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html] \nin the AWS Billing and Cost Management User Guide.\n\nThis operation requires permissions for the elasticfilesystem:DeleteTags action.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeFileSystems": {
            "main": "./lib/actions/DescribeFileSystems.js",
            "title": "DescribeFileSystems",
            "description": "Returns the description of a specific Amazon EFS file system if either the file\nsystem CreationToken or the FileSystemId is provided. Otherwise, it returns\ndescriptions of all file systems owned by the caller's AWS account in the AWS\nRegion of the endpoint that you're calling.\n\nWhen retrieving all file system descriptions, you can optionally specify the \nMaxItems parameter to limit the number of descriptions in a response. Currently,\nthis number is automatically set to 10. If more file system descriptions remain,\nAmazon EFS returns a NextMarker, an opaque token, in the response. In this case,\nyou should send a subsequent request with the Marker request parameter set to\nthe value of NextMarker. \n\nTo retrieve a list of your file system descriptions, this operation is used in\nan iterative process, where DescribeFileSystems is called first without the \nMarker and then the operation continues to call it with the Marker parameter set\nto the value of the NextMarker from the previous response until the response has\nno NextMarker. \n\n The order of file systems returned in the response of one DescribeFileSystems \ncall and the order of file systems returned across the responses of a multi-call\niteration is unspecified. \n\n This operation requires permissions for the \nelasticfilesystem:DescribeFileSystems action.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeFileSystems.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateFileSystem": {
            "main": "./lib/actions/CreateFileSystem.js",
            "title": "CreateFileSystem",
            "description": "Creates a new, empty file system. The operation requires a creation token in the\nrequest that Amazon EFS uses to ensure idempotent creation (calling the\noperation with same creation token has no effect). If a file system does not\ncurrently exist that is owned by the caller's AWS account with the specified\ncreation token, this operation does the following:\n\n *  Creates a new, empty file system. The file system will have an Amazon EFS\n   assigned ID, and an initial lifecycle state creating.\n   \n   \n *  Returns with the description of the created file system.\n   \n   \n\nOtherwise, this operation returns a FileSystemAlreadyExists error with the ID of\nthe existing file system.\n\nFor basic use cases, you can use a randomly generated UUID for the creation\ntoken.\n\n The idempotent operation allows you to retry a CreateFileSystem call without\nrisk of creating an extra file system. This can happen when an initial call\nfails in a way that leaves it uncertain whether or not a file system was\nactually created. An example might be that a transport level timeout occurred or\nyour connection was reset. As long as you use the same creation token, if the\ninitial call had succeeded in creating a file system, the client can learn of\nits existence from the FileSystemAlreadyExists error.\n\nThe CreateFileSystem call returns while the file system's lifecycle state is\nstill creating. You can check the file system creation status by calling the \nDescribeFileSystems operation, which among other things returns the file system\nstate.\n\nThis operation also takes an optional PerformanceMode parameter that you choose\nfor your file system. We recommend generalPurpose performance mode for most file\nsystems. File systems using the maxIO performance mode can scale to higher\nlevels of aggregate throughput and operations per second with a tradeoff of\nslightly higher latencies for most file operations. The performance mode can't\nbe changed after the file system has been created. For more information, see \nAmazon EFS: Performance Modes\n[https://docs.aws.amazon.com/efs/latest/ug/performance.html#performancemodes.html]\n.\n\nAfter the file system is fully created, Amazon EFS sets its lifecycle state to \navailable, at which point you can create one or more mount targets for the file\nsystem in your VPC. For more information, see CreateMountTarget. You mount your\nAmazon EFS file system on an EC2 instances in your VPC by using the mount\ntarget. For more information, see Amazon EFS: How it Works\n[https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html]. \n\n This operation requires permissions for the elasticfilesystem:CreateFileSystem \naction.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateFileSystem.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteFileSystem": {
            "main": "./lib/actions/DeleteFileSystem.js",
            "title": "DeleteFileSystem",
            "description": "Deletes a file system, permanently severing access to its contents. Upon return,\nthe file system no longer exists and you can't access any contents of the\ndeleted file system.\n\n You can't delete a file system that is in use. That is, if the file system has\nany mount targets, you must first delete them. For more information, see \nDescribeMountTargets and DeleteMountTarget. \n\nThe DeleteFileSystem call returns while the file system state is still deleting.\nYou can check the file system deletion status by calling the DescribeFileSystems \noperation, which returns a list of file systems in your account. If you pass\nfile system ID or creation token for the deleted file system, the \nDescribeFileSystems returns a 404 FileSystemNotFound error.\n\nThis operation requires permissions for the elasticfilesystem:DeleteFileSystem \naction.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteFileSystem.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateFileSystem": {
            "main": "./lib/actions/UpdateFileSystem.js",
            "title": "UpdateFileSystem",
            "description": "Updates the throughput mode or the amount of provisioned throughput of an existing file system.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateFileSystem.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeLifecycleConfiguration": {
            "main": "./lib/actions/DescribeLifecycleConfiguration.js",
            "title": "DescribeLifecycleConfiguration",
            "description": "Returns the current LifecycleConfiguration object for the specified Amazon EFS\nfile system. EFS lifecycle management uses the LifecycleConfiguration object to\nidentify which files to move to the EFS Infrequent Access (IA) storage class.\nFor a file system without a LifecycleConfiguration object, the call returns an\nempty array in the response.\n\nThis operation requires permissions for the \nelasticfilesystem:DescribeLifecycleConfiguration operation.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeLifecycleConfiguration.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutLifecycleConfiguration": {
            "main": "./lib/actions/PutLifecycleConfiguration.js",
            "title": "PutLifecycleConfiguration",
            "description": "Enables lifecycle management by creating a new LifecycleConfiguration object. A \nLifecycleConfiguration object defines when files in an Amazon EFS file system\nare automatically transitioned to the lower-cost EFS Infrequent Access (IA)\nstorage class. A LifecycleConfiguration applies to all files in a file system.\n\nEach Amazon EFS file system supports one lifecycle configuration, which applies\nto all files in the file system. If a LifecycleConfiguration object already\nexists for the specified file system, a PutLifecycleConfiguration call modifies\nthe existing configuration. A PutLifecycleConfiguration call with an empty \nLifecyclePolicies array in the request body deletes any existing \nLifecycleConfiguration and disables lifecycle management.\n\nYou can enable lifecycle management only for EFS file systems created after the\nrelease of EFS infrequent access.\n\nIn the request, specify the following: \n\n *  The ID for the file system for which you are creating a lifecycle management\n   configuration.\n   \n   \n *  A LifecyclePolicies array of LifecyclePolicy objects that define when files\n   are moved to the IA storage class. The array can contain only one \n   \"TransitionToIA\": \"AFTER_30_DAYS\" LifecyclePolicy item.\n   \n   \n\nThis operation requires permissions for the \nelasticfilesystem:PutLifecycleConfiguration operation.\n\nTo apply a LifecycleConfiguration object to an encrypted file system, you need\nthe same AWS Key Management Service (AWS KMS) permissions as when you created\nthe encrypted file system.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutLifecycleConfiguration.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeMountTargets": {
            "main": "./lib/actions/DescribeMountTargets.js",
            "title": "DescribeMountTargets",
            "description": "Returns the descriptions of all the current mount targets, or a specific mount\ntarget, for a file system. When requesting all of the current mount targets, the\norder of mount targets returned in the response is unspecified.\n\nThis operation requires permissions for the \nelasticfilesystem:DescribeMountTargets action, on either the file system ID that\nyou specify in FileSystemId, or on the file system of the mount target that you\nspecify in MountTargetId.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeMountTargets.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateMountTarget": {
            "main": "./lib/actions/CreateMountTarget.js",
            "title": "CreateMountTarget",
            "description": "Creates a mount target for a file system. You can then mount the file system on\nEC2 instances by using the mount target.\n\nYou can create one mount target in each Availability Zone in your VPC. All EC2\ninstances in a VPC within a given Availability Zone share a single mount target\nfor a given file system. If you have multiple subnets in an Availability Zone,\nyou create a mount target in one of the subnets. EC2 instances do not need to be\nin the same subnet as the mount target in order to access their file system. For\nmore information, see Amazon EFS: How it Works\n[https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html]. \n\nIn the request, you also specify a file system ID for which you are creating the\nmount target and the file system's lifecycle state must be available. For more\ninformation, see DescribeFileSystems.\n\nIn the request, you also provide a subnet ID, which determines the following:\n\n *  VPC in which Amazon EFS creates the mount target\n   \n   \n *  Availability Zone in which Amazon EFS creates the mount target\n   \n   \n *  IP address range from which Amazon EFS selects the IP address of the mount\n   target (if you don't specify an IP address in the request)\n   \n   \n\nAfter creating the mount target, Amazon EFS returns a response that includes, a \nMountTargetId and an IpAddress. You use this IP address when mounting the file\nsystem in an EC2 instance. You can also use the mount target's DNS name when\nmounting the file system. The EC2 instance on which you mount the file system by\nusing the mount target can resolve the mount target's DNS name to its IP\naddress. For more information, see How it Works: Implementation Overview\n[https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html#how-it-works-implementation]\n. \n\nNote that you can create mount targets for a file system in only one VPC, and\nthere can be only one mount target per Availability Zone. That is, if the file\nsystem already has one or more mount targets created for it, the subnet\nspecified in the request to add another mount target must meet the following\nrequirements:\n\n *  Must belong to the same VPC as the subnets of the existing mount targets\n   \n   \n *  Must not be in the same Availability Zone as any of the subnets of the\n   existing mount targets\n   \n   \n\nIf the request satisfies the requirements, Amazon EFS does the following:\n\n *  Creates a new mount target in the specified subnet.\n   \n   \n *  Also creates a new network interface in the subnet as follows:\n   \n    *  If the request provides an IpAddress, Amazon EFS assigns that IP address\n      to the network interface. Otherwise, Amazon EFS assigns a free address in\n      the subnet (in the same way that the Amazon EC2 CreateNetworkInterface \n      call does when a request does not specify a primary private IP address).\n      \n      \n    *  If the request provides SecurityGroups, this network interface is\n      associated with those security groups. Otherwise, it belongs to the\n      default security group for the subnet's VPC.\n      \n      \n    *  Assigns the description Mount target fsmt-id for file system fs-id where \n      fsmt-id is the mount target ID, and fs-id is the FileSystemId.\n      \n      \n    *  Sets the requesterManaged property of the network interface to true, and\n      the requesterId value to EFS.\n      \n      \n   \n   Each Amazon EFS mount target has one corresponding requester-managed EC2\n   network interface. After the network interface is created, Amazon EFS sets\n   the NetworkInterfaceId field in the mount target's description to the network\n   interface ID, and the IpAddress field to its address. If network interface\n   creation fails, the entire CreateMountTarget operation fails.\n   \n   \n\nThe CreateMountTarget call returns only after creating the network interface,\nbut while the mount target state is still creating, you can check the mount\ntarget creation status by calling the DescribeMountTargets operation, which\namong other things returns the mount target state.\n\nWe recommend that you create a mount target in each of the Availability Zones.\nThere are cost considerations for using a file system in an Availability Zone\nthrough a mount target created in another Availability Zone. For more\ninformation, see Amazon EFS [http://aws.amazon.com/efs/]. In addition, by always\nusing a mount target local to the instance's Availability Zone, you eliminate a\npartial failure scenario. If the Availability Zone in which your mount target is\ncreated goes down, then you can't access your file system through that mount\ntarget. \n\nThis operation requires permissions for the following action on the file system:\n\n *   elasticfilesystem:CreateMountTarget \n   \n   \n\nThis operation also requires permissions for the following Amazon EC2 actions:\n\n *   ec2:DescribeSubnets \n   \n   \n *   ec2:DescribeNetworkInterfaces \n   \n   \n *   ec2:CreateNetworkInterface",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateMountTarget.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteMountTarget": {
            "main": "./lib/actions/DeleteMountTarget.js",
            "title": "DeleteMountTarget",
            "description": "Deletes the specified mount target.\n\nThis operation forcibly breaks any mounts of the file system by using the mount\ntarget that is being deleted, which might disrupt instances or applications\nusing those mounts. To avoid applications getting cut off abruptly, you might\nconsider unmounting any mounts of the mount target, if feasible. The operation\nalso deletes the associated network interface. Uncommitted writes might be lost,\nbut breaking a mount target using this operation does not corrupt the file\nsystem itself. The file system you created remains. You can mount an EC2\ninstance in your VPC by using another mount target.\n\nThis operation requires permissions for the following action on the file system:\n\n *   elasticfilesystem:DeleteMountTarget \n   \n   \n\nThe DeleteMountTarget call returns while the mount target state is still \ndeleting. You can check the mount target deletion by calling the \nDescribeMountTargets operation, which returns a list of mount target\ndescriptions for the given file system. \n\nThe operation also requires permissions for the following Amazon EC2 action on\nthe mount target's network interface:\n\n *   ec2:DeleteNetworkInterface",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteMountTarget.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeMountTargetSecurityGroups": {
            "main": "./lib/actions/DescribeMountTargetSecurityGroups.js",
            "title": "DescribeMountTargetSecurityGroups",
            "description": "Returns the security groups currently in effect for a mount target. This\noperation requires that the network interface of the mount target has been\ncreated and the lifecycle state of the mount target is not deleted.\n\nThis operation requires permissions for the following actions:\n\n *   elasticfilesystem:DescribeMountTargetSecurityGroups action on the mount\n   target's file system. \n   \n   \n *   ec2:DescribeNetworkInterfaceAttribute action on the mount target's network\n   interface.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeMountTargetSecurityGroups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ModifyMountTargetSecurityGroups": {
            "main": "./lib/actions/ModifyMountTargetSecurityGroups.js",
            "title": "ModifyMountTargetSecurityGroups",
            "description": "Modifies the set of security groups in effect for a mount target.\n\nWhen you create a mount target, Amazon EFS also creates a new network interface.\nFor more information, see CreateMountTarget. This operation replaces the\nsecurity groups in effect for the network interface associated with a mount\ntarget, with the SecurityGroups provided in the request. This operation requires\nthat the network interface of the mount target has been created and the\nlifecycle state of the mount target is not deleted. \n\nThe operation requires permissions for the following actions:\n\n *   elasticfilesystem:ModifyMountTargetSecurityGroups action on the mount\n   target's file system. \n   \n   \n *   ec2:ModifyNetworkInterfaceAttribute action on the mount target's network\n   interface.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ModifyMountTargetSecurityGroups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeTags": {
            "main": "./lib/actions/DescribeTags.js",
            "title": "DescribeTags",
            "description": "Returns the tags associated with a file system. The order of tags returned in\nthe response of one DescribeTags call and the order of tags returned across the\nresponses of a multiple-call iteration (when using pagination) is unspecified. \n\n This operation requires permissions for the elasticfilesystem:DescribeTags \naction.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}